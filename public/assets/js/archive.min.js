const debugModeJsArchiv=false;(function(){if(debugModeJsArchiv)console.log("DEBUG [archive.js/archive.min.js]: Skript wird geladen.");addEventListener("DOMContentLoaded",()=>{if(debugModeJsArchiv)console.log("DEBUG [archive.js/archive.min.js]: DOMContentLoaded Event gefeuert.");document.querySelectorAll(".chapter h2").forEach((el,index)=>{el.addEventListener("click",ev=>{if(debugModeJsArchiv)console.log(`DEBUG [archive.js/archive.min.js]: Kapitel-Header (Index: ${index}) geklickt. Ziel-Element:`,ev.target);showThumbnails(ev.target.closest(".chapter"))});if(debugModeJsArchiv)console.log(`DEBUG [archive.js/archive.min.js]: Event-Listener zu Kapitel-H2 (Index: ${index}) hinzugefügt. Element:`,el)});document.querySelectorAll(".collapsible-content").forEach((el,index)=>{el.style.display="none";if(debugModeJsArchiv)console.log(`DEBUG [archive.js/archive.min.js]: Collapsible-Content Container (Index: ${index}) initial ausgeblendet. Element:`,el)});let storedExpansion=null;let expandedChapters=[];let expireTime=null;if(typeof window.localStorage!=="undefined"&&typeof window.localStorage.archiveExpansion!=="undefined"){try{storedExpansion=JSON.parse(window.localStorage.archiveExpansion);expandedChapters=storedExpansion.expandedChapters;expireTime=storedExpansion.expireTime;if(debugModeJsArchiv)console.log("DEBUG [archive.js/archive.min.js]: Gespeicherte Archiv-Erweiterung im Local Storage gefunden:",storedExpansion)}catch(e){if(debugModeJsArchiv)console.error("DEBUG [archive.js/archive.min.js]: Fehler beim Parsen des Local Storage Inhalts:",e);window.localStorage.removeItem("archiveExpansion")}}const currentTime=(new Date).getTime();if(!expandedChapters.length||expireTime<=currentTime){const firstChapter=document.querySelector(".chapter:first-of-type");if(firstChapter){if(debugModeJsArchiv)console.log("DEBUG [archive.js/archive.min.js]: Keine erweiterten Kapitel gefunden oder abgelaufen, klappe das erste Kapitel auf.");showThumbnails(firstChapter,true,true)}}else{if(debugModeJsArchiv)console.log("DEBUG [archive.js/archive.min.js]: Stelle zuvor erweiterte Kapitel aus dem Local Storage wieder her.");for(let idx=0;idx<expandedChapters.length;++idx){const chapterId=expandedChapters[idx];const chapter=document.querySelector(`.chapter[data-ch-id='${chapterId}']`);if(chapter){showThumbnails(chapter,true,true);if(debugModeJsArchiv)console.log(`DEBUG [archive.js/archive.min.js]: Kapitel mit ID '${chapterId}' erfolgreich wiederhergestellt.`)}else{if(debugModeJsArchiv)console.warn(`DEBUG [archive.js/archive.min.js]: Kapitel mit ID '${chapterId}' aus Local Storage nicht gefunden.`)}}}});function showThumbnails(element,noAnimation=false,noStore=false){if(!element){if(debugModeJsArchiv)console.warn("DEBUG [showThumbnails]: Element ist null oder undefined.");return}const chapterId=element.dataset.chId;if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Funktion aufgerufen für Kapitel-ID: ${chapterId}. noAnimation: ${noAnimation}, noStore: ${noStore}`);const chapterHeader=element.querySelector("h2");const collapsibleContent=element.querySelector(".collapsible-content");const linkContainer=element.querySelector(".chapter-links");const arrow=chapterHeader.querySelector(".arrow-down, .arrow-left");if(!collapsibleContent||!linkContainer||!arrow){if(debugModeJsArchiv)console.error(`DEBUG [showThumbnails]: Benötigte Elemente für Kapitel '${chapterId}' nicht gefunden. collapsibleContent:`,collapsibleContent,"linkContainer:",linkContainer,"arrow:",arrow);return}const isExpanded=collapsibleContent.style.display!=="none";if(!isExpanded){if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Kapitel '${chapterId}' wird ausgeklappt.`);element.classList.add("expanded");if(!noAnimation){arrow.style.transition="transform 0.3s ease-out"}else{arrow.style.transition="none"}arrow.style.transform="rotate(0deg)";collapsibleContent.style.display="block";if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Kapitel '${chapterId}' auf 'expanded' gesetzt und Anzeige/Pfeil angepasst.`);if(!linkContainer.dataset.loaded){linkContainer.dataset.loaded=true;if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Lade Thumbnails für Kapitel '${chapterId}'.`);linkContainer.querySelectorAll("img").forEach((img,index)=>{img.addEventListener("load",()=>{img.closest("a").classList.add("loaded");if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Thumbnail (Index: ${index}) für Kapitel '${chapterId}' erfolgreich geladen. src: ${img.src}`)});img.addEventListener("error",()=>{if(debugModeJsArchiv)console.error(`DEBUG [showThumbnails]: Fehler beim Laden des Thumbnails (Index: ${index}) für Kapitel '${chapterId}'. data-src: ${img.dataset.src}`);img.src="assets/images/layout/thumbnails/placeholder.jpg";img.closest("a").classList.add("loaded")});img.setAttribute("src",img.dataset.src);if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Thumbnail (Index: ${index}) für Kapitel '${chapterId}' Ladevorgang gestartet. data-src: ${img.dataset.src}`)})}}else{if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Kapitel '${chapterId}' wird eingeklappt.`);element.classList.remove("expanded");if(!noAnimation){arrow.style.transition="transform 0.3s ease-out"}else{arrow.style.transition="none"}arrow.style.transform="rotate(-90deg)";collapsibleContent.style.display="none";if(debugModeJsArchiv)console.log(`DEBUG [showThumbnails]: Kapitel '${chapterId}' auf 'eingeklappt' gesetzt und Anzeige/Pfeil angepasst.`)}if(typeof window.localStorage!=="undefined"&&!noStore){const expandedChaptersElements=document.querySelectorAll(".chapter.expanded");const chapterArray=Array.from(expandedChaptersElements).map(chap=>chap.dataset.chId);const storageObj={expireTime:(new Date).getTime()+6e5,expandedChapters:chapterArray};try{window.localStorage.archiveExpansion=JSON.stringify(storageObj);if(debugModeJsArchiv)console.log("DEBUG [showThumbnails]: Erweiterungsstatus in Local Storage gespeichert:",storageObj)}catch(e){if(debugModeJsArchiv)console.error("DEBUG [showThumbnails]: Fehler beim Speichern des Erweiterungsstatus im Local Storage:",e)}}else if(debugModeJsArchiv&&noStore){console.log("DEBUG [showThumbnails]: Erweiterungsstatus nicht in Local Storage gespeichert (noStore ist true).")}}})();
//# sourceMappingURL=archive.min.js.map