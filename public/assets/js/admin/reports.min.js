/**
 * @file      ROOT/resources/js/admin_reports.js
 * @package   twokinds.4lima.de
 * @author    Felix M. (@RaptorXilef)
 * @copyright 2025 Felix M.
 * @license   Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
 * @link      https://github.com/RaptorXilef/twokinds.4lima.de
 * @version   1.0.0
 * @since     1.0.0 Initiale Erstellung
 *
 * @description Dieses Skript steuert das Detail-Modal auf der Seite management_reports.php.
 * Es bef端llt das Modal mit Daten, ruft das Original-Transkript per Fetch-API
 * und generiert eine visuelle Diff-Ansicht mit jsDiff.
 */
document.addEventListener("DOMContentLoaded",()=>{const debugMode=window.debugMode||false;const modal=document.getElementById("report-detail-modal");const table=document.getElementById("reports-table");if(!modal||!table){if(debugMode)console.log("DEBUG [admin_reports.js]: Modal oder Tabelle nicht gefunden. Skript beendet.");return}const modalContent=document.getElementById("report-detail-content");const comicLink=document.getElementById("detail-comic-link");const comicIdSpan=document.getElementById("detail-comic-id");const dateSpan=document.getElementById("detail-date");const submitterSpan=document.getElementById("detail-submitter");const typeSpan=document.getElementById("detail-type");const descriptionContainer=document.getElementById("detail-description-container");const descriptionP=document.getElementById("detail-description");const transcriptSection=document.getElementById("detail-transcript-section");const diffViewer=document.getElementById("detail-diff-viewer");const suggestionContainer=document.getElementById("detail-suggestion-container");const suggestionTextarea=document.getElementById("detail-suggestion");const apiBaseUrl=window.adminApiEndpoints?.getComicData||"./api/get_comic_data.php";const csrfToken=window.csrfToken||"";const openModal=row=>{const dataset=row.dataset;const comicId=dataset.comicId||"k.A.";const reportType=dataset.type||"k.A.";const description=dataset.fullDescription||"";const suggestion=dataset.suggestion||"";const original=dataset.original||"";comicIdSpan.textContent=comicId;comicLink.href=`./comic.php?id=${comicId}`;try{const linkInTable=row.querySelector('td a[target="_blank"]');if(linkInTable){comicLink.href=linkInTable.href}}catch(e){}dateSpan.textContent=dataset.date||"k.A.";submitterSpan.textContent=dataset.submitter||"k.A.";typeSpan.textContent=reportType;if(description){descriptionP.textContent=description;descriptionContainer.style.display="block"}else{descriptionP.textContent="Keine Beschreibung vorhanden.";descriptionContainer.style.display="block"}if(reportType==="transcript"){transcriptSection.style.display="block";if(suggestion){suggestionTextarea.value=suggestion;suggestionContainer.style.display="block"}else{suggestionTextarea.value="";suggestionContainer.style.display="none"}diffViewer.innerHTML='<p class="loading-text">Original-Transkript wird geladen...</p>';if(original){if(debugMode)console.log('DEBUG [admin_reports.js]: Verwende "Original" aus dem Report f端r Diff.');generateDiff(original,suggestion)}else{if(debugMode)console.log("DEBUG [admin_reports.js]: Hole aktuelles Transkript vom Server f端r Diff.");fetchOriginalTranscript(comicId,suggestion)}}else{transcriptSection.style.display="none"}modal.style.display="flex"};const closeModal=()=>{modal.style.display="none";diffViewer.innerHTML=""};modal.addEventListener("click",e=>{if(e.target.dataset.action==="close-detail-modal"){closeModal()}});table.addEventListener("click",e=>{const detailButton=e.target.closest(".detail-button");if(detailButton){const row=detailButton.closest("tr");if(row){openModal(row)}}});document.addEventListener("keydown",e=>{if(e.key==="Escape"&&modal.style.display==="flex"){closeModal()}});const fetchOriginalTranscript=async(comicId,suggestion)=>{if(!comicId){diffViewer.innerHTML='<p class="status-message status-red">Fehler: Keine Comic-ID zum Abrufen des Transkripts vorhanden.</p>';return}try{const apiUrl=`${apiBaseUrl}?id=${encodeURIComponent(comicId)}&csrf_token=${encodeURIComponent(csrfToken)}`;const response=await fetch(apiUrl,{method:"GET",headers:{Accept:"application/json"}});if(!response.ok){throw new Error(`Server-Antwort: ${response.status} ${response.statusText}`)}const data=await response.json();if(data.success&&data.transcript){if(debugMode)console.log("DEBUG [admin_reports.js]: Original-Transkript erfolgreich geladen.");const plainTranscript=decodeHtmlEntities(stripHtmlTags(data.transcript));generateDiff(plainTranscript,suggestion)}else{throw new Error(data.message||"Transkript konnte nicht geladen werden (ung端ltige Antwort).")}}catch(error){if(debugMode)console.error("DEBUG [admin_reports.js]: Fetch-Fehler:",error);diffViewer.innerHTML=`<p class="status-message status-red">Fehler beim Laden des Original-Transkripts: ${error.message}</p>`}};const generateDiff=(original,suggestion)=>{if(typeof Diff==="undefined"||typeof Diff.diffChars==="undefined"){diffViewer.innerHTML='<p class="status-message status-red">Fehler: jsDiff-Bibliothek nicht geladen.</p>';return}if(!suggestion){diffViewer.innerHTML='<p class="status-message status-info">Kein Transkript-Vorschlag vorhanden.</p>';return}if(original===suggestion){diffViewer.innerHTML='<p class="status-message status-info">Vorschlag ist identisch mit dem Original.</p>';return}const diff=Diff.diffChars(original,suggestion);const fragment=document.createDocumentFragment();diff.forEach(part=>{const node=document.createElement(part.added?"ins":part.removed?"del":"span");node.appendChild(document.createTextNode(part.value));fragment.appendChild(node)});diffViewer.innerHTML="";diffViewer.appendChild(fragment)};function stripHtmlTags(str){if(!str)return"";const div=document.createElement("div");div.innerHTML=str;return div.textContent||div.innerText||""}function decodeHtmlEntities(str){if(!str)return"";const textarea=document.createElement("textarea");textarea.innerHTML=str;return textarea.value}});
//# sourceMappingURL=reports.min.js.map